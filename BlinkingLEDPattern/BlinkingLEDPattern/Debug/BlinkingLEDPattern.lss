
BlinkingLEDPattern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ef  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000531  00000000  00000000  0000076f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000315  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  0000124d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	33 c0       	rjmp	.+102    	; 0x9c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <util/delay.h>


int main(void)
{
    DDRB = 0b00001111;
  38:	8f e0       	ldi	r24, 0x0F	; 15
  3a:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	84 bb       	out	0x14, r24	; 20
	int ct =0;
  40:	e0 e0       	ldi	r30, 0x00	; 0
  42:	f0 e0       	ldi	r31, 0x00	; 0
    while (1) 
    {
		for (int i= 0;i<=4;i++)
		{
			PORTB = (0b11110000 >> i);
  44:	60 ef       	ldi	r22, 0xF0	; 240
  46:	70 e0       	ldi	r23, 0x00	; 0
			_delay_ms(2000);
			ct = ct+1;
			if(ct%2 == 0){
				PORTC = 0xff;
  48:	af ef       	ldi	r26, 0xFF	; 255

int main(void)
{
    DDRB = 0b00001111;
	DDRC = 0xff;
	int ct =0;
  4a:	9f 01       	movw	r18, r30
    while (1) 
    {
		for (int i= 0;i<=4;i++)
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB = (0b11110000 >> i);
  50:	ab 01       	movw	r20, r22
  52:	08 2e       	mov	r0, r24
  54:	02 c0       	rjmp	.+4      	; 0x5a <__SREG__+0x1b>
  56:	55 95       	asr	r21
  58:	47 95       	ror	r20
  5a:	0a 94       	dec	r0
  5c:	e2 f7       	brpl	.-8      	; 0x56 <__SREG__+0x17>
  5e:	48 bb       	out	0x18, r20	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  60:	4f e7       	ldi	r20, 0x7F	; 127
  62:	5a e1       	ldi	r21, 0x1A	; 26
  64:	b6 e0       	ldi	r27, 0x06	; 6
  66:	41 50       	subi	r20, 0x01	; 1
  68:	50 40       	sbci	r21, 0x00	; 0
  6a:	b0 40       	sbci	r27, 0x00	; 0
  6c:	e1 f7       	brne	.-8      	; 0x66 <__SREG__+0x27>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <__SREG__+0x31>
  70:	00 00       	nop
			_delay_ms(2000);
			ct = ct+1;
  72:	2f 5f       	subi	r18, 0xFF	; 255
  74:	3f 4f       	sbci	r19, 0xFF	; 255
			if(ct%2 == 0){
  76:	20 fd       	sbrc	r18, 0
  78:	0b c0       	rjmp	.+22     	; 0x90 <__SREG__+0x51>
				PORTC = 0xff;
  7a:	a5 bb       	out	0x15, r26	; 21
  7c:	4f e7       	ldi	r20, 0x7F	; 127
  7e:	5a e1       	ldi	r21, 0x1A	; 26
  80:	b6 e0       	ldi	r27, 0x06	; 6
  82:	41 50       	subi	r20, 0x01	; 1
  84:	50 40       	sbci	r21, 0x00	; 0
  86:	b0 40       	sbci	r27, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <__SREG__+0x43>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <__SREG__+0x4d>
  8c:	00 00       	nop
				_delay_ms(2000);
				PORTC = 0x00;
  8e:	15 ba       	out	0x15, r1	; 21
    DDRB = 0b00001111;
	DDRC = 0xff;
	int ct =0;
    while (1) 
    {
		for (int i= 0;i<=4;i++)
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	85 30       	cpi	r24, 0x05	; 5
  94:	91 05       	cpc	r25, r1
  96:	e1 f6       	brne	.-72     	; 0x50 <__SREG__+0x11>
  98:	35 96       	adiw	r30, 0x05	; 5
  9a:	d7 cf       	rjmp	.-82     	; 0x4a <__SREG__+0xb>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
