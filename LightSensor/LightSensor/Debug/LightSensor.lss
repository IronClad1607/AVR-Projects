
LightSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000052a  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b1  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d2  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c3  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000022  00000000  00000000  00000fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	10 c0       	rjmp	.+32     	; 0x56 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>

void main()
{
	DDRB = 0XFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
	DDRC = 0X00;
  3c:	14 ba       	out	0x14, r1	; 20
	char sensor;
	while(1){
		sensor = PINC & 0b0000001;

		if(sensor == 1){
			PORTB = 0xff;
  3e:	2f ef       	ldi	r18, 0xFF	; 255
	DDRB = 0XFF;
	DDRC = 0X00;

	char sensor;
	while(1){
		sensor = PINC & 0b0000001;
  40:	83 b3       	in	r24, 0x13	; 19

		if(sensor == 1){
  42:	98 2f       	mov	r25, r24
  44:	91 70       	andi	r25, 0x01	; 1
  46:	80 ff       	sbrs	r24, 0
  48:	02 c0       	rjmp	.+4      	; 0x4e <__SREG__+0xf>
			PORTB = 0xff;
  4a:	28 bb       	out	0x18, r18	; 24
  4c:	f9 cf       	rjmp	.-14     	; 0x40 <__SREG__+0x1>
		}
		if(sensor == 0){
  4e:	91 11       	cpse	r25, r1
  50:	f7 cf       	rjmp	.-18     	; 0x40 <__SREG__+0x1>
			PORTB = 0x00;
  52:	18 ba       	out	0x18, r1	; 24
  54:	f5 cf       	rjmp	.-22     	; 0x40 <__SREG__+0x1>

00000056 <_exit>:
  56:	f8 94       	cli

00000058 <__stop_program>:
  58:	ff cf       	rjmp	.-2      	; 0x58 <__stop_program>
